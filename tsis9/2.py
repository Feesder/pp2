import pygame
import random
import sys

pygame.init()

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WIDTH, HEIGHT = 600, 600
CELL_SIZE = 20
COLS = WIDTH // CELL_SIZE
ROWS = HEIGHT // CELL_SIZE

# –¶–≤–µ—Ç–∞
WHITE = (255, 255, 255)
GREEN = (0, 200, 0)
RED = (200, 0, 0)
BLACK = (0, 0, 0)
GRAY = (50, 50, 50)
YELLOW = (255, 255, 0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ —à—Ä–∏—Ñ—Ç–∞
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake_Game")
clock = pygame.time.Clock()
font = pygame.font.SysFont("Arial", 24)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
snake = [(5, 5), (4, 5), (3, 5)]
direction = (1, 0)
score = 0
level = 1
speed = 10

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–µ–Ω
walls = []
for x in range(COLS):
    walls.append((x, 0))
    walls.append((x, ROWS - 1))

for y in range(ROWS):
    walls.append((0, y))
    walls.append((COLS - 1, y))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤
food = None
food_weight = 1
food_timer = 0
FOOD_LIFESPAN = 300

# —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—á–∫–æ–≤
def get_food_position():
    while True:
        x = random.randint(1, COLS - 2)
        y = random.randint(1, ROWS - 2)
        if (x, y) not in snake and (x, y) not in walls:
            return (x, y)

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–≥—Ä—ã
def draw_game(food_pos):
    screen.fill(BLACK)

    # –†–µ–Ω–¥–µ—Ä —Å—Ç–µ–Ω—ã
    for wall in walls:
        pygame.draw.rect(screen, GRAY, (wall[0] * CELL_SIZE, wall[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # –†–µ–Ω–¥–µ—Ä –∑–º–µ–π–∫–∏
    for segment in snake:
        pygame.draw.rect(screen, GREEN, (segment[0] * CELL_SIZE, segment[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # –†–µ–Ω–¥–µ—Ä –µ–¥—ã
    pygame.draw.rect(screen, RED, (food_pos[0] * CELL_SIZE, food_pos[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))
    weight_text = font.render(str(food_weight), True, YELLOW)
    screen.blit(weight_text, (food_pos[0] * CELL_SIZE + 5, food_pos[1] * CELL_SIZE + 2))

    # –†–µ–Ω–¥–µ—Ä –æ—á–∫–æ–≤
    score_text = font.render(f"Score: {score}", True, WHITE)
    level_text = font.render(f"Level: {level}", True, WHITE)
    screen.blit(score_text, (10, 10))
    screen.blit(level_text, (WIDTH - 120, 10))

    # –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω
    pygame.display.update()

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
def show_game_over_screen():
    screen.fill(BLACK)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    game_over_text = font.render("üí• Game Over!", True, RED)
    score_text = font.render(f"Final Score: {score}", True, WHITE)
    level_text = font.render(f"Level Reached: {level}", True, WHITE)
    hint_text = font.render("Press ESC to quit...", True, GRAY)

    # –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—Å—Ç–∞
    screen.blit(game_over_text, (WIDTH // 2 - 80, HEIGHT // 2 - 60))
    screen.blit(score_text, (WIDTH // 2 - 80, HEIGHT // 2 - 20))
    screen.blit(level_text, (WIDTH // 2 - 80, HEIGHT // 2 + 20))
    screen.blit(hint_text, (WIDTH // 2 - 100, HEIGHT // 2 + 60))

    # –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω
    pygame.display.update()

    # –ñ–¥–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞
    waiting = True
    while waiting:

        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                pygame.quit()

                sys.exit()

            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                waiting = False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã
food = get_food_position()
food_weight = random.randint(1, 3)
food_timer = FOOD_LIFESPAN

# –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
running = True
while running:
    clock.tick(speed) # FPS

    # –ñ–¥–∞—Ç—å –≤—ã—Ö–æ–¥–∞
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # –¢—Ä–∏–≥–≥–µ—Ä—ã –∫–Ω–æ–ø–æ–∫
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP] and direction != (0, 1):
        direction = (0, -1)

    elif keys[pygame.K_DOWN] and direction != (0, -1):
        direction = (0, 1)

    elif keys[pygame.K_LEFT] and direction != (1, 0):
        direction = (-1, 0)

    elif keys[pygame.K_RIGHT] and direction != (-1, 0):
        direction = (1, 0)

    # –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã
    new_head = (snake[0][0] + direction[0], snake[0][1] + direction[1])

    # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã –µ—Å–ª–∏ –∑–º–µ—è —Å—ä–µ—Å—Ç—å —Å–µ–±—è –∏–ª–∏ –∫–∞—Å–∞–µ—Ç—Å—è —Å—Ç–µ–Ω—ã
    if new_head in walls or new_head in snake:
        show_game_over_screen()
        pygame.quit()
        sys.exit()

    # –î–æ–±–∞–≤–∏—Ç—å –∑–º–µ—é
    snake.insert(0, new_head)

    # –ï—Å–ª–∏ –∑–º–µ—è —Å—ä–µ—Å—Ç –µ–¥—É
    if new_head == food:

        score += food_weight
        food = get_food_position()
        food_weight = random.randint(1, 3)
        food_timer = FOOD_LIFESPAN

        if score // 5 + 1 > level:
            level += 1
            speed += 2
    else:
        # –£–¥–∞–ª–∏—Ç—å —Ö–≤–æ—Å—Ç
        snake.pop()

    # –¢–∞–π–º–µ—Ä –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –µ–¥—ã
    food_timer -= 1
    if food_timer <= 0:
        food = get_food_position()
        food_weight = random.randint(1, 3)
        food_timer = FOOD_LIFESPAN

    # –†–µ–Ω–¥–µ—Ä –∏–≥—Ä—ã
    draw_game(food)